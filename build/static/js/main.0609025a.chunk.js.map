{"version":3,"sources":["reducers/actions.ts","reducers/index.ts","utils/check-grid/index.ts","utils/copy-grid/index.ts","utils/create-full-grid/index.ts","utils/fill-grid/index.ts","utils/get-random-index/index.ts","utils/identify-square/index.ts","global/index.ts","utils/solve-grid/index.ts","utils/is-in/col/index.ts","utils/is-in/row/index.ts","utils/is-in/square/index.ts","utils/shuffle/index.ts","utils/remove-numbers/index.ts","utils/compare-array/index.ts","reducers/reducer.ts","core/configure-store/index.ts","core/serviceWorker/index.ts","core/styles/global.ts","components/grid/block/styles/index.ts","components/grid/block/index.tsx","components/grid/styles/index.ts","components/grid/index.tsx","components/styles/card/index.ts","components/styles/content/index.ts","components/styles/title/index.ts","components/styles/button/index.ts","components/numbers/button/index.tsx","components/numbers/styles/index.ts","components/numbers/index.tsx","components/new-button/index.tsx","index.tsx","core/styles/theme.ts","reducers/types.ts"],"names":["createGrid","type","types","fillBlock","value","coords","selectBlock","reducer","checkGrid","grid","i","j","copyGrid","gridCopy","r","c","createFullGrid","fillGrid","numbers","row","col","Math","floor","shuffle","isInRow","isInCol","square","identifySquare","isInSquare","getRandomIndex","random","identifyWorkingSquare","x","push","counter","solveGrid","global","includes","array","length","removeNumbers","attempts","backUp","compareArrays","arr1","arr2","Array","isArray","len","initialState","state","action","solvedGrid","challengeGrid","removeNumber","workingGrid","alert","selectedBlock","persistConfig","key","storage","persistedReducer","persistReducer","configureStore","store","createStore","devToolsEnhancer","persistor","persistStore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","createGlobalStyle","props","css","theme","colors","background","black","Container","styled","div","active","puzzle","blue","white","transition","lightBlue","Block","colIndex","rowIndex","useSelector","isActive","isPuzzle","dispatch","useDispatch","data-cy","onClick","Row","Grid","selectedValue","create","useCallback","fill","n","useMousetrap","useEffect","Children","toArray","map","_","Card","Content","Title","h1","Button","button","NumberButton","Numbers","NewButton","createNewGrid","confirm","ReactDOM","render","loading","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","CREATE_GRID","FILL_BLOCK","SELECT_BLOCK"],"mappings":"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","file":"static/js/main.0609025a.chunk.js","sourcesContent":["import { Action, AnyAction } from \"redux\";\r\n\r\nimport * as types from \"./types\";\r\nimport { BLOCK_COORDS, NUMBERS } from \"../typings\";\r\n\r\nexport const createGrid = (): Action => ({ type: types.CREATE_GRID });\r\n\r\nexport const fillBlock = (value: NUMBERS, coords: BLOCK_COORDS): AnyAction => ({\r\n  coords,\r\n  type: types.FILL_BLOCK,\r\n  value,\r\n});\r\nexport const selectBlock = (coords: BLOCK_COORDS): AnyAction => ({\r\n  coords,\r\n  type: types.SELECT_BLOCK,\r\n});\r\n","import reducer from './reducer'\r\n\r\nexport * from './actions'\r\nexport * from './interfaces'  \r\nexport type IReducer = ReturnType<typeof reducer>\r\nexport default reducer","import { GRID } from \"../../typings\";\r\n\r\n/**\r\n * A function to check if the grid is full\r\n * @param grid A 9X9 Sudoku Grid\r\n */\r\nfunction checkGrid(grid: GRID): boolean {\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (grid[i][j] === 0) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default checkGrid;\r\n","import { GRID, INDEX } from \"../../typings\";\r\n\r\nfunction copyGrid(grid: GRID): GRID {\r\n  const gridCopy: GRID = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ];\r\n\r\n  for (let r: INDEX = 0; r < 9; r++) {\r\n    for (let c: INDEX = 0; c < 9; c++) {\r\n      gridCopy[r][c] = grid[r][c];\r\n    }\r\n  }\r\n  return gridCopy;\r\n}\r\n\r\nexport default copyGrid;\r\n","import { GRID } from '../../typings'\r\nimport { fillGrid } from 'utils'\r\n\r\n/**\r\n * A function to create a full valid sudoku grid\r\n */\r\nfunction createFullGrid(): GRID {\r\n  const grid: GRID = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n  ]\r\n  fillGrid(grid)\r\n  return grid\r\n}\r\n\r\nexport default createFullGrid\r\n","import { GRID, NUMBERS } from 'typings'\r\nimport {\r\n  checkGrid,\r\n  identifySquare,\r\n  isInCol,\r\n  isInRow,\r\n  isInSquare,\r\n  shuffle,\r\n} from 'utils'\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nfunction fillGrid(grid: GRID) {\r\n  let row = 0\r\n  let col = 0\r\n\r\n  for (let i = 0; i < 81; i++) {\r\n    row = Math.floor(i / 9)\r\n    col = i % 9\r\n\r\n    if (grid[row][col] === 0) {\r\n      shuffle(numbers)\r\n      \r\n      // eslint-disable-next-line prefer-const-let\r\n      for (let value of numbers) {\r\n        if (!isInRow({ grid, row, value })){\r\n          if (!isInCol({ col, grid, value })) {\r\n            const square = identifySquare({ col, grid, row })\r\n            if (!isInSquare({ square, value })) {\r\n              grid[row][col] = value\r\n              if (checkGrid(grid)) {return true}\r\n              else if (fillGrid(grid)) {return true}\r\n            }\r\n          }}\r\n      }\r\n\r\n      break\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0\r\n  return\r\n}\r\n\r\nexport default fillGrid\r\n/* eslint-enable */\r\n","function getRandomIndex() {\r\n    return Math.floor(Math.random() * Math.floor( 9))\r\n}\r\n\r\nexport default getRandomIndex","import { GRID, SQUARE } from \"../../typings\";\r\n\r\ninterface IInput {\r\n  grid: GRID;\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\n/**\r\n * A function that identifies and returns the current square of a given sudoku grid at a row and column index.\r\n * @param input Object with 9X9 Sudoku Grid, row index and column index\r\n */\r\nfunction identifyWorkingSquare({ col, grid, row }: IInput): SQUARE {\r\n  const square = [];\r\n  if (row < 3) {\r\n    if (col < 3) {\r\n      for (let x = 0; x < 3; x++) {\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\r\n      }\r\n    } else if (col < 6) {\r\n      for (let x = 0; x < 3; x++) {\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\r\n      }\r\n    } else {\r\n      for (let x = 0; x < 3; x++) {\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\r\n      }\r\n    }\r\n  } else if (row < 6) {\r\n    if (col < 3) {\r\n      for (let x = 3; x < 6; x++) {\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\r\n      }\r\n    } else if (col < 6) {\r\n      for (let x = 3; x < 6; x++) {\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\r\n      }\r\n    } else {\r\n      for (let x = 3; x < 6; x++) {\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\r\n      }\r\n    }\r\n  } else {\r\n    if (col < 3) {\r\n      for (let x = 6; x < 9; x++) {\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\r\n      }\r\n    } else if (col < 6) {\r\n      for (let x = 6; x < 9; x++) {\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\r\n      }\r\n    } else {\r\n      for (let x = 6; x < 9; x++) {\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return square as SQUARE;\r\n}\r\n\r\nexport default identifyWorkingSquare;\r\n","export default {\r\n    counter : 0, \r\n\r\n}","import global from \"../../global\";\r\nimport { GRID, NUMBERS } from \"../../typings\";\r\nimport {\r\n  checkGrid,\r\n  identifySquare,\r\n  isInCol,\r\n  isInRow,\r\n  isInSquare,\r\n} from \"../../utils\";\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\nfunction solveGrid(grid: GRID) {\r\n  let row = 0;\r\n  let col = 0;\r\n\r\n  for (let i = 0; i < 81; i++) {\r\n    col = i % 9;\r\n    row = Math.floor(i / 9);\r\n    if (grid[row][col] === 0) {\r\n      // eslint-disable-next-line prefer-const\r\n      for (let value of numbers) {\r\n        if (!isInRow({ grid, row, value })) {\r\n          if (!isInCol({ col, grid, value })) {\r\n            const square = identifySquare({ col, grid, row });\r\n            if (!isInSquare({ square, value })) {\r\n              grid[row][col] = value;\r\n              if (checkGrid(grid)) {\r\n                global.counter++;\r\n                break;\r\n              } else if (solveGrid(grid)) {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0;\r\n}\r\n\r\nexport default solveGrid;\r\n\r\n/* eslint-enable */\r\n","import { GRID, NUMBERS } from \"../../../typings\";\r\n\r\ninterface IInput {\r\n  col: number;\r\n  grid: GRID;\r\n  value: NUMBERS;\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid column.\r\n * @param input Object with 9X9 Sudoku Grid, column index and value.\r\n */\r\nfunction isInCol({ col, grid, value }: IInput): boolean {\r\n  for (let i = 0; i < 9; i++) {\r\n    if (value === grid[i][col]) {\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default isInCol;\r\n","import { GRID, NUMBERS } from 'typings'\r\n\r\ninterface IInput {\r\n  grid: GRID\r\n  row: number\r\n  value: NUMBERS\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid row.\r\n * @param input Object with 9x9 Sudoku Grid, row index and value\r\n */\r\nfunction isInRow({ grid, row, value }: IInput): boolean {\r\n  return grid[row].includes(value)\r\n}\r\n\r\nexport default isInRow\r\n","import { NUMBERS, SQUARE } from 'typings'\r\n\r\ninterface IInput {\r\n  square: SQUARE\r\n  value: NUMBERS\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid square.\r\n * @param input Object with 3X# Square and value.\r\n */\r\nfunction isInSquare({ square, value }: IInput): boolean {\r\n  return [...square[0], ...square[1], ...square[2]].includes(value)\r\n}\r\n\r\nexport default isInSquare\r\n","/**\r\n * An array shuffling using the Fisher-Yates shuffle alogrithm\r\n * @param array An array that you want shuffled\r\n */\r\n\r\nfunction shuffle(array: any[]) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\nexport default shuffle;\r\n","import  { GRID } from '../../typings'\r\nimport global  from '../../global'\r\nimport { getRandomIndex, solveGrid, copyGrid } from '../../utils'\r\n\r\n\r\n\r\n/**\r\n * Removes numbers from a full grid to create a Sudoku Puzzle.\r\n * @param grid 9X9 Sudoku Grid\r\n * @param attempts number of attempts to solve (higher means more difficult) - default 5\r\n */\r\n\r\nfunction removeNumbers(grid: GRID, attempts = 5 ): GRID {\r\n    while (attempts > 0){\r\n        let row = getRandomIndex()\r\n        let col = getRandomIndex()\r\n    \r\n\r\n    while (grid[row][col] === 0) {\r\n         row = getRandomIndex()\r\n         col = getRandomIndex()\r\n    }\r\n\r\n    const backUp = grid[row][col]\r\n    grid[row][col] = 0\r\n\r\n    const gridCopy = copyGrid(grid)\r\n\r\n    global.counter = 0 \r\n    solveGrid(gridCopy) \r\n\r\n    \r\n    if(global.counter !== 1 ) {\r\n        grid[row][col] = backUp\r\n        attempts--\r\n    }\r\n}\r\n    return grid\r\n}\r\n\r\nexport default removeNumbers\r\n\r\n","/**\r\n * Compares two arrays (of any dimensions) and returns true if they are equal, other returns false\r\n * @param arr1 first array to be compared\r\n * @param arr2 second array to be compared\r\n */\r\n\r\nfunction compareArrays(arr1: any[], arr2: any[]): boolean {\r\n  if (!Array.isArray(arr1) && !Array.isArray(arr2)) {\r\n    return arr1 === arr2;\r\n  }\r\n  if (arr1.length !== arr2.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0, len = arr1.length; i < len; i++) {\r\n    if (!compareArrays(arr1[i], arr2[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default compareArrays;\r\n","import { AnyAction } from 'redux'\r\nimport { GRID } from '../typings'\r\n\r\nimport { createFullGrid, removeNumber, copyGrid, compareArrays, } from '../utils'\r\n\r\nimport { IReducer } from './interfaces'\r\nimport * as types from './types' \r\n\r\n\r\nconst initialState: IReducer = {}\r\n\r\nfunction reducer(state = initialState, action: AnyAction): IReducer {\r\n    switch(action.type){\r\n        case types.CREATE_GRID: {\r\n            const solvedGrid = createFullGrid()\r\n            const gridCopy = copyGrid(solvedGrid)\r\n            const challengeGrid = removeNumber(gridCopy)\r\n            const workingGrid = copyGrid(challengeGrid)\r\n            return{\r\n                ...state,\r\n                challengeGrid,\r\n                solvedGrid,\r\n                workingGrid\r\n            }\r\n}\r\n            case types.FILL_BLOCK: {\r\n            if( state.workingGrid && state.solvedGrid) {\r\n             if (state.solvedGrid[action.coords[0]][action.coords[1]] !== action.value){\r\n                alert(' Incorrect Option ') \r\n                return state\r\n             }\r\n            state.workingGrid[action.coords[0]][action.coords[1]] = action.value\r\n            if(compareArrays(state.workingGrid, state.solvedGrid) ){\r\n            alert('Completed')\r\n            }\r\n            return { ...state, workingGrid: [...state.workingGrid] as GRID}\r\n        }\r\n        return state\r\n    }\r\n        case types.SELECT_BLOCK:\r\n            return{...state, selectedBlock: action.coords }   \r\n              \r\n        default: \r\n            return state\r\n    \r\n}\r\n\r\n}\r\n\r\n\r\nexport default reducer","import {createStore} from 'redux'\r\nimport { devToolsEnhancer} from 'redux-devtools-extension'\r\nimport { persistStore, persistReducer} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\n\r\nimport reducer from '../../reducers'\r\n\r\n\r\nconst persistConfig= {\r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig , reducer)\r\nfunction configureStore() {\r\n    const store = createStore(\r\n        persistedReducer,\r\n        devToolsEnhancer({})\r\n    )\r\n    const persistor = persistStore(store)\r\n\r\n\r\n    return {persistor, store}\r\n}\r\n\r\nexport default configureStore","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  type Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n  };\r\n  \r\n  export function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(\r\n        process.env.PUBLIC_URL,\r\n        window.location.href\r\n      );\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n    return\r\n  }\r\n  ","import {createGlobalStyle, css} from 'styled-components'\r\n\r\n\r\nexport default createGlobalStyle`\r\n${props => css`\r\nhtml {\r\n    height: 100%;\r\n\r\n    body{\r\n        display: flex;\r\n        flex-direction: column;\r\n        height:100%;\r\n        margin:0;\r\n\r\n        #root{\r\n            background: ${props.theme.colors.background};\r\n            color: ${props.theme.colors.black};\r\n            height:100%;\r\n            display: flex;\r\n            font-family: sans-serif;\r\n            justify-content:center;\r\n            padding:15px;\r\n            \r\n\r\n        }\r\n\r\n    }\r\n}\r\n`}\r\n`","import styled, { css } from 'styled-components'\r\n\r\ninterface IProps{\r\n  active?: boolean\r\n  puzzle?: boolean\r\n}\r\n\r\n\r\nexport const Container = styled.div<IProps>`\r\n  ${({ active, puzzle, theme }) => css`\r\n    align-items: center;\r\n    background-color: ${active ? theme.colors.blue :theme.colors.white};\r\n    border: solid 1px ${theme.colors.black};\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n    flex-basis: 0;\r\n    font-size: 20px;\r\n    font-weight: ${puzzle ? 'bold' : 'normal'};\r\n    height: auto;\r\n    justify-content: center;\r\n    transition: ${theme.transition};\r\n    user-select: none;\r\n\r\n    &:before {\r\n      padding-top: 100%;\r\n      content: '';\r\n      float: left;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: ${theme.colors.lightBlue};\r\n    }\r\n  `}\r\n`\r\n","import React, { FC } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Dispatch, AnyAction } from 'redux'\r\n\r\nimport {  IReducer, selectBlock } from 'reducers'\r\nimport { N, INDEX } from '../../../typings'\r\nimport { Container } from './styles'\r\n \r\ninterface IProps {\r\n  colIndex: INDEX\r\n  rowIndex: INDEX\r\n}\r\n\r\ninterface IState {\r\n  value: N\r\n  isActive: boolean\r\n  isPuzzle: boolean\r\n}\r\n\r\nconst Block: FC<IProps> = ({ colIndex, rowIndex }) => {\r\n  const state= useSelector<IReducer,IState>(({workingGrid, selectedBlock,challengeGrid }) =>({\r\n    isActive: selectedBlock ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex : false ,\r\n    isPuzzle:\r\n        challengeGrid && challengeGrid[rowIndex][colIndex] !== 0 ? true : false,\r\n    value: workingGrid ? workingGrid[rowIndex][colIndex] : 0,\r\n  }))\r\n\r\nconst dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\nfunction handleClick() {\r\n  if (!state.isActive) {\r\n    dispatch(selectBlock([rowIndex,colIndex]))\r\n  }\r\n}\r\n  return (<Container \r\n  active={state.isActive} \r\n  data-cy={`block-${rowIndex}-${colIndex}`} \r\n  onClick={handleClick}\r\n  puzzle={state.isPuzzle}\r\n  >\r\n    {state.value === 0 ? '' : state.value}\r\n  </Container>\r\n  )\r\n}\r\n\r\nexport default Block\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 10px 0;\r\n`\r\n\r\nexport const Row = styled.div`\r\n  ${({ theme }) => css`\r\n    display: flex;\r\n    flex-flow: row;\r\n\r\n    &:nth-child(1) {\r\n      div {\r\n        border-top: solid 4px ${theme.colors.black};\r\n      }\r\n    }\r\n    &:nth-child(3),\r\n    &:nth-child(6) {\r\n      div {\r\n        border-bottom: solid 3px ${theme.colors.black};\r\n      }\r\n    }\r\n    &:nth-child(9) {\r\n      border-bottom: solid 4px ${theme.colors.black};\r\n    }\r\n\r\n    div {\r\n      &:nth-child(1) {\r\n        border-left: solid 4px ${theme.colors.black};\r\n      }\r\n      &:nth-child(3),\r\n      &:nth-child(6),\r\n      &:nth-child(9) {\r\n        border-right: solid 4px ${theme.colors.black};\r\n      }\r\n      &:nth-child(4),\r\n      &:nth-child(7) {\r\n        border-left: none;\r\n      }\r\n    }\r\n  `}\r\n`\r\n","import React, { FC, Children, useCallback, useEffect } from 'react'\r\nimport useMousetrap from 'react-hook-mousetrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AnyAction, Dispatch } from 'redux'\r\n\r\nimport { createGrid, IReducer, selectBlock, fillBlock } from '../../reducers'\r\nimport { BLOCK_COORDS, GRID, INDEX, N, NUMBERS } from '../../typings'\r\n\r\nimport Block from './block'\r\nimport { Container, Row } from './styles'\r\n\r\ninterface IState {\r\n  selectedBlock?: BLOCK_COORDS\r\n  selectedValue: N\r\n  solvedGrid?: GRID\r\n}\r\n\r\nconst Grid: FC = () => {\r\n  const state = useSelector<IReducer, IState>(\r\n    ({ selectedBlock, workingGrid, solvedGrid}) => ({\r\n      selectedBlock,\r\n      selectedValue:\r\n        workingGrid && selectedBlock\r\n          ? workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n          : 0,\r\n          solvedGrid,\r\n    })\r\n  )\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n  const create = useCallback(() => dispatch(createGrid()), [dispatch])\r\n\r\n  const fill = useCallback(\r\n    (n: NUMBERS) => {\r\n      if (state.selectedBlock && state.selectedValue === 0) {\r\n        dispatch(fillBlock(n, state.selectedBlock))\r\n      }\r\n    },\r\n    [dispatch, state.selectedBlock, state.selectedValue]\r\n  );\r\n\r\n  function moveDown() {\r\n    if (state.selectedBlock && state.selectedBlock[0] < 8) {\r\n      dispatch(\r\n        selectBlock([\r\n          (state.selectedBlock[0] + 1) as INDEX,\r\n          state.selectedBlock[1],\r\n        ])\r\n      )\r\n    }\r\n  };\r\n\r\n  function moveLeft() {\r\n    if (state.selectedBlock && state.selectedBlock[1] > 0) {\r\n      dispatch(\r\n        selectBlock([\r\n          state.selectedBlock[0],\r\n          (state.selectedBlock[1] - 1) as INDEX,\r\n        ])\r\n      )\r\n    }\r\n  }\r\n\r\n  function moveRight() {\r\n    if (state.selectedBlock && state.selectedBlock[1] < 8) {\r\n      dispatch(\r\n        selectBlock([\r\n          state.selectedBlock[0],\r\n          (state.selectedBlock[1] + 1) as INDEX,\r\n        ])\r\n      )\r\n    }\r\n  }\r\n\r\n  function moveUp() {\r\n    if (state.selectedBlock && state.selectedBlock[0] > 0) {\r\n      dispatch(\r\n        selectBlock([\r\n          (state.selectedBlock[0] - 1) as INDEX,\r\n          state.selectedBlock[1],\r\n        ])\r\n      )\r\n    }\r\n  }\r\n\r\n  useMousetrap('1', () => fill(1))\r\n  useMousetrap('2', () => fill(2))\r\n  useMousetrap('3', () => fill(3))\r\n  useMousetrap('4', () => fill(4))\r\n  useMousetrap('5', () => fill(5))\r\n  useMousetrap('6', () => fill(6))\r\n  useMousetrap('7', () => fill(7))\r\n  useMousetrap('8', () => fill(8))\r\n  useMousetrap('9', () => fill(9))\r\n  useMousetrap('down', moveDown)\r\n  useMousetrap('left', moveLeft)\r\n  useMousetrap('right', moveRight)\r\n  useMousetrap('up', moveUp)\r\n\r\n  useEffect(() => {\r\n    if (!state.solvedGrid) {\r\n      create()\r\n    }\r\n  }, [create, state.solvedGrid])\r\n\r\n  return (\r\n    <Container data-cy=\"grid-container\">\r\n      {Children.toArray(\r\n        [...Array(9)].map((_, rowIndex) => (\r\n          <Row data-cy=\"grid-row-container\">\r\n            {Children.toArray(\r\n              [...Array(9)].map((_, colIndex) => (\r\n                <Block\r\n                  colIndex={colIndex as INDEX}\r\n                  rowIndex={rowIndex as INDEX}\r\n                />\r\n              ))\r\n            )}\r\n          </Row>\r\n        ))\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Grid\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Card = styled.div`\r\n  ${({ theme }) => css`\r\n    background-color: ${theme.colors.white};\r\n    border-radius: 15px;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    max-height: fit-content;\r\n    padding: 15px;\r\n  `}\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Content = styled.div`\r\n  max-width: 500px;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Title = styled.h1`\r\n  ${({ theme }) => css`\r\n    color: ${theme.colors.white};\r\n    margin-top: 0;\r\n    text-align: center;\r\n  `}\r\n`\r\n","import styled, {css} from 'styled-components'\r\n\r\n\r\nexport const Button = styled.button`\r\n ${({ theme }) => css`\r\n align-items: center;\r\n background-color: ${theme.colors.black};\r\n border: 2px solid ${theme.colors.black};\r\n border-radius: 4px;\r\n color: ${theme.colors.white};\r\n cursor: pointer;\r\n display: flex;\r\n flex: 1 ;\r\n font-size: 16px;\r\n font-weight: bold;\r\n height: 40px;\r\n justify-content: center;\r\n margin: 4px 2px;\r\n min-height: 40px;\r\n opacity: 0.9;\r\n padding: 0;\r\n transition: ${theme.transition};\r\n\r\n&:focus {\r\n    border-color: ${theme.colors.blue};\r\n    outline: none;\r\n\r\n}\r\n\r\n&:hover {\r\n    opacity: 0.6;\r\n}\r\n\r\n\r\n `} \r\n`","import React, { FC, useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AnyAction, Dispatch } from 'redux'\r\n\r\nimport { Button } from '../../styles'\r\nimport { fillBlock, IReducer } from '../../../reducers'\r\nimport { BLOCK_COORDS, N, NUMBERS } from '../../../typings'\r\n\r\ninterface IProps {\r\n  value: NUMBERS\r\n}\r\n\r\ninterface IState {\r\n  selectedBlock?: BLOCK_COORDS\r\n  selectedValue: N\r\n}\r\n\r\nconst NumberButton: FC<IProps> = ({ value }) => {\r\n  const state = useSelector<IReducer, IState>(\r\n    ({ selectedBlock, workingGrid }) => ({\r\n      selectedBlock,\r\n      selectedValue:\r\n        workingGrid && selectedBlock\r\n          ? workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n          : 0,\r\n    })\r\n  )\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n  const fill = useCallback(() => {\r\n    if (state.selectedBlock && state.selectedValue === 0) {\r\n      dispatch(fillBlock(value, state.selectedBlock))\r\n    }\r\n  }, [dispatch, state.selectedBlock, state.selectedValue, value])\r\n\r\n  return <Button onClick={fill}>{value}</Button>\r\n}\r\n\r\nexport default NumberButton\r\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\ndisplay: flex;\r\nflex-flow: row;\r\n` ","import React, { FC } from 'react'\r\n\r\nimport { NUMBERS } from '../../typings'\r\n\r\nimport Button from './button'\r\nimport { Container } from './styles'\r\n\r\nconst Numbers: FC = () => (\r\n  <Container>\r\n    {([1, 2, 3, 4, 5, 6, 7, 8, 9] as NUMBERS[]).map(value => (\r\n      <Button key={value} value={value} />\r\n    ))}\r\n  </Container>\r\n)\r\n\r\nexport default Numbers\r\n","import React, { FC, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Action, Dispatch } from \"redux\";\r\n\r\nimport { Button } from \"../styles\";\r\nimport { createGrid } from \"../../reducers\";\r\n\r\nconst NewButton: FC = () => {\r\n  const dispatch = useDispatch<Dispatch<Action>>();\r\n\r\n  const createNewGrid = useCallback(() => {\r\n    if (window.confirm(\"Are you sure you want to start a new game?\")) {\r\n      dispatch(createGrid());\r\n    }\r\n  }, [dispatch]);\r\n\r\n  return <Button onClick={createNewGrid}>New Game</Button>\r\n};\r\n\r\nexport default NewButton\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ThemeProvider} from 'styled-components';\r\nimport { Provider} from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n \r\nimport { configureStore, register }from './core';\r\nimport { GlobalStyles, theme} from './core/styles';\r\nimport {Grid, Card, Content,Title,Numbers,NewButton } from './components';\r\n \r\n\r\nconst { persistor, store} = configureStore()\r\nReactDOM.render(\r\n  <ThemeProvider theme={theme}>\r\n  <GlobalStyles/>\r\n  <Provider store ={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n  <Content data-cy=\"content\">\r\n    <Title data-cy= \"title\"> Sudoku</Title>\r\n    <Card data-cy=\"card\"> \r\n    <NewButton/>\r\n    <Grid/>\r\n    <Numbers/>\r\n      </Card>\r\n  </Content>\r\n    </PersistGate>\r\n  </Provider>\r\n  </ThemeProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nregister(); \r\n","export default {\r\n    colors:{\r\n        background:'radial-gradient(#282c34cc,#282c34)',\r\n        black:'#0A0A0B',\r\n        blue:'#5398D5',\r\n        lightBlue:'#0F0F99',\r\n        white:'#F6F5FA',\r\n\r\n    },\r\n    transition:'0.3s'\r\n}","export const CREATE_GRID ='CREATE_GRID'\r\nexport const FILL_BLOCK = 'FILL_BLOCK'\r\nexport const SELECT_BLOCK = 'SELECT_BLOCK'\r\n\r\n"],"sourceRoot":""}